# Documentazione delle Entità

Questo README fornisce una panoramica delle entità del dominio utilizzate nella tua applicazione Spring Boot aziendale. Per ciascuna entità troverai:

* **Descrizione Funzionale**: spiegazione del ruolo dell'entità nel contesto applicativo.
* **Campi Principali**: elenco dei campi più rilevanti.
* ***Relazioni**: collegamenti con altre entità.

---

## 1. Persona

**Descrizione Funzionale:** Rappresenta l’anagrafica di un utente interno (dipendente, manager, dirigente).

**Campi Principali:**

* `id` (Long): chiave primaria.
* `firstName`, `lastName` (String): nome e cognome.
* `birthDate` (LocalDate): data di nascita.
* `gender` (Enum): genere.
* `taxCode` (String): codice fiscale univoco.
* `email`, `phoneNumber` (String): contatti.
* `hireDate`, `terminationDate` (LocalDate): date di assunzione e cessazione.
* `createdAt`, `updatedAt` (Instant): timestamp di creazione e modifica.

**Relazioni:**

* 1↔1 con **Account**
* N→1 con **Department**
* N→1 con **Position**
* N↔M con **Team**
* N↔M con **Project**

---

## 2. Account

**Descrizione Funzionale:** Gestione delle credenziali, sicurezza e stato di accesso.

**Campi Principali:**

* `id` (Long): chiave primaria.
* `username` (String): nome utente univoco.
* `passwordHash` (String): hash della password.
* `emailVerified`, `enabled` (Boolean): stato dell’email e abilitazione.
* `lastLogin` (Instant): ultimo accesso.
* `failedAttempts`, `lockedUntil` (Integer/Instant): sicurezza login.
* `createdAt`, `updatedAt` (Instant): timestamp.

**Relazioni:**

* 1↔1 con **Persona**
* N↔M con **Role**

---

## 3. Role

**Descrizione Funzionale:** Raggruppa permessi per profili di accesso (es. ADMIN, USER).

**Campi Principali:**

* `id` (Long), `name` (String), `description` (String).

**Relazioni:**

* N↔M con **Permission**
* N↔M con **Account**

---

## 4. Permission

**Descrizione Funzionale:** Definisce singole azioni autorizzate (es. CAN\_EDIT\_USER).

**Campi Principali:**

* `id` (Long), `name` (String), `description` (String).

**Relazioni:**

* N↔M con **Role**

---

## 5. Department

**Descrizione Funzionale:** Unità organizzativa aziendale.

**Campi Principali:**

* `id` (Long), `name` (String), `location` (String).
* `createdAt` (Instant).

**Relazioni:**

* 1→N con **Persona**
* 1→1 con **Persona** (manager)

---

## 6. Position

**Descrizione Funzionale:** Qualifica o mansione lavorativa.

**Campi Principali:**

* `id` (Long), `title` (String), `description` (String), `salaryGrade` (String).

**Relazioni:**

* 1→N con **Persona**

---

## 7. Team

**Descrizione Funzionale:** Gruppi di lavoro trasversali.

**Campi Principali:**

* `id` (Long), `name` (String), `description` (String).

**Relazioni:**

* N↔M con **Persona**

---

## 8. Project

**Descrizione Funzionale:** Gestione di iniziative e progetti aziendali.

**Campi Principali:**

* `id` (Long), `code` (String), `name` (String), `description` (String).
* `startDate`, `endDate` (LocalDate), `status` (Enum).
* `createdAt` (Instant).

**Relazioni:**

* N↔M con **Persona**
* 1→N con **Task**

---

## 9. Task

**Descrizione Funzionale:** Singolo elemento di lavoro assegnabile.

**Campi Principali:**

* `id` (Long), `title` (String), `description` (String).
* `dueDate` (LocalDate), `status` (Enum).

**Relazioni:**

* N→1 con **Persona**
* N→1 con **Project**

---

## 10. AuditLog

**Descrizione Funzionale:** Tracciamento di operazioni CRUD e accessi per compliance.

**Campi Principali:**

* `id` (Long), `entityName` (String), `entityId` (Long).
* `action` (String), `timestamp` (Instant), `details` (JSON).

**Relazioni:**

* N→1 con **Account**

---

*Tutti i timestamp (`createdAt`, `updatedAt`) sono gestiti tramite annotazioni Hibernate (`@CreationTimestamp`, `@UpdateTimestamp`).*

Questo README ti aiuta a comprendere rapidamente il modello di dominio; per dettagli di implementazione, consulta le classi in `com.example.app.domain`.
